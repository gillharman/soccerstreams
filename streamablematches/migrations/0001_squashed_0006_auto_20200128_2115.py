# Generated by Django 2.2.7 on 2020-01-29 02:26

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('streamablematches', '0001_initial'), ('streamablematches', '0002_auto_20200126_1435'), ('streamablematches', '0003_leaguecopy_matchcopy_teamcopy_teamlogocopy_teamsinleaguecopy'), ('streamablematches', '0004_lineupcopy_requestlog_rotowirerequestlog'), ('streamablematches', '0005_auto_20200128_1947'), ('streamablematches', '0006_auto_20200128_2115')]

    initial = True

    dependencies = [
        ('leagues', '0002_auto_20200126_1435'),
    ]

    operations = [
        migrations.CreateModel(
            name='LeagueCopy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('code', models.CharField(max_length=10)),
                ('country', models.CharField(max_length=30)),
                ('api_id', models.IntegerField(null=True)),
                ('tracked', models.BooleanField(default=False)),
                ('current_match_day', models.IntegerField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'league_copy',
            },
        ),
        migrations.CreateModel(
            name='TeamCopy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_id', models.IntegerField()),
                ('name', models.CharField(max_length=60)),
                ('short_name', models.CharField(max_length=30, null=True)),
                ('tla', models.CharField(max_length=10, null=True)),
                ('venue', models.CharField(max_length=100, null=True)),
                ('club_colors', models.CharField(max_length=30, null=True)),
                ('crest', models.CharField(max_length=2083, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('leagues', models.ManyToManyField(to='streamablematches.LeagueCopy')),
            ],
            options={
                'db_table': 'team_copy',
            },
        ),
        migrations.CreateModel(
            name='TeamsInLeagueCopy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamablematches.LeagueCopy')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamablematches.TeamCopy')),
            ],
            options={
                'db_table': 'teams_in_league_copy',
            },
        ),
        migrations.CreateModel(
            name='TeamLogoCopy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo_48x48', models.ImageField(null=True, upload_to='')),
                ('logo_48x48_url', models.CharField(max_length=2083, null=True)),
                ('logo_96x96', models.ImageField(null=True, upload_to='')),
                ('logo_96x96_url', models.CharField(max_length=2083, null=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamablematches.TeamCopy')),
            ],
            options={
                'db_table': 'team_logo_copy',
            },
        ),
        migrations.CreateModel(
            name='MatchCopy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_match_id', models.IntegerField()),
                ('status', models.CharField(choices=[('SH', 'Scheduled'), ('LI', 'Live'), ('IP', 'In Play'), ('PA', 'Paused'), ('FN', 'Finished'), ('PP', 'Postponed'), ('SS', 'Suspended'), ('CN', 'Canceled')], max_length=2)),
                ('match_day', models.IntegerField()),
                ('match_date_time', models.DateTimeField()),
                ('goals_scored_home_team', models.IntegerField(null=True)),
                ('goals_scored_away_team', models.IntegerField(null=True)),
                ('penalty_goals_home_team', models.IntegerField(null=True)),
                ('penalty_goals_away_team', models.IntegerField(null=True)),
                ('winner', models.CharField(choices=[('HO', 'Home Team'), ('AT', 'Away Team'), ('DW', 'Draw')], default='', max_length=2)),
                ('ace_link', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awayTeam', to='streamablematches.TeamCopy')),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='homeTeam', to='streamablematches.TeamCopy')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamablematches.LeagueCopy')),
            ],
            options={
                'db_table': 'match_copy',
            },
        ),
        migrations.CreateModel(
            name='ScannedMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match', models.CharField(max_length=100)),
                ('postUrl', models.CharField(default='https://reddit.com/soccerstreams', max_length=2083)),
                ('time', models.CharField(max_length=14)),
                ('aceLink', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StreamableMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamablematches.MatchCopy')),
                ('scanned_match',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamablematches.ScannedMatch')),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('streamer', models.CharField(default='', max_length=100)),
                ('link', models.CharField(default=None, max_length=100)),
                ('linkScore', models.IntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('match',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamablematches.ScannedMatch')),
            ],
        ),
        migrations.AlterModelTable(
            name='link',
            table='link',
        ),
        migrations.AlterModelTable(
            name='scannedmatch',
            table='scanned_match',
        ),
        migrations.AlterModelTable(
            name='streamablematch',
            table='streamable_match',
        ),
        migrations.CreateModel(
            name='RequestLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('httpStatusCode', models.CharField(max_length=10)),
                ('requestContent', models.TextField(default=None)),
                ('responseContent', models.TextField(default=None)),
                ('endPoint', models.CharField(max_length=2083)),
                ('exception', models.CharField(max_length=253)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'request log',
                'verbose_name_plural': 'request logs',
                'db_table': 'logs_request_log',
            },
        ),
        migrations.CreateModel(
            name='LineupCopy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(choices=[('G', 'Goalkeeper'), ('D', 'Defender'), ('M', 'Midfielder'), ('F', 'Forward'), ('F/M', 'Forward/Midfielder'), ('M/D', 'Midfielder/Defender')], max_length=40)),
                ('player', models.CharField(max_length=40)),
                ('lineup_type', models.CharField(choices=[('H', 'Home'), ('A', 'Away')], max_length=10)),
                ('confirmed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamablematches.MatchCopy')),
            ],
            options={
                'db_table': 'lineup_copy',
            },
        ),
        migrations.CreateModel(
            name='RotowireRequestLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('html', models.TextField()),
                ('parsed_count', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='streamablematches.LeagueCopy')),
            ],
            options={
                'verbose_name': 'rotowire request log',
                'verbose_name_plural': 'rotowire request logs',
                'db_table': 'logs_rotowire_request_log',
            },
        ),
    ]
